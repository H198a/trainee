class CenterAlignedFlowLayout: UICollectionViewFlowLayout {
    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {
        guard let attributes = super.layoutAttributesForElements(in: rect) else { return nil }

        var currentRowY: CGFloat = -1
        var rowItems: [UICollectionViewLayoutAttributes] = []
        var centeredAttributes: [UICollectionViewLayoutAttributes] = []

        for attribute in attributes {
            guard attribute.representedElementCategory == .cell else {
                centeredAttributes.append(attribute)
                continue
            }

            if attribute.frame.origin.y > currentRowY {
                // Process the previous row
                if !rowItems.isEmpty {
                    centerRow(rowItems)
                    centeredAttributes.append(contentsOf: rowItems)
                }
                rowItems = [attribute]
                currentRowY = attribute.frame.origin.y
            } else {
                rowItems.append(attribute)
            }
        }

        // Center the last row
        if !rowItems.isEmpty {
            centerRow(rowItems)
            centeredAttributes.append(contentsOf: rowItems)
        }

        return centeredAttributes
    }

    private func centerRow(_ rowAttributes: [UICollectionViewLayoutAttributes]) {
        guard let collectionView = collectionView, !rowAttributes.isEmpty else { return }

        let totalCellWidth = rowAttributes.reduce(0) { $0 + $1.frame.width }
        let totalSpacingWidth = minimumInteritemSpacing * CGFloat(rowAttributes.count - 1)
        let totalRowWidth = totalCellWidth + totalSpacingWidth

        let availableWidth = collectionView.bounds.width - sectionInset.left - sectionInset.right
        let alignmentOffset = (availableWidth - totalRowWidth) / 2

        var currentXOffset = sectionInset.left + alignmentOffset

        for attribute in rowAttributes {
            attribute.frame.origin.x = currentXOffset
            currentXOffset += attribute.frame.width + minimumInteritemSpacing
        }
    }
}

import UIKit

class InterestSelectionVC: UIViewController {
    //MARK: Outlet and Variable Declaration
    @IBOutlet weak var progressBar: UIProgressView!
    @IBOutlet weak var cvInterest: UICollectionView!
    var currentStep = 8
    var selectedIndexes = [Int]()
    var arrImg = ["camera","Photography","Gaming","Music","Travel","Painting","Politics","Charity","Cooking","Pets","Sports","Fashion"]//9
    var arrLabel = ["Reading","Photography","Gaming","Music","Travel","Painting","Politics","Charity","Cooking","Pets","Sports","Fashion"]//12
    override func viewDidLoad() {
        super.viewDidLoad()
        setUP()
        let layout = CenterAlignedFlowLayout()
          layout.minimumInteritemSpacing = 1
          layout.minimumLineSpacing = 1
          layout.sectionInset = .zero
//        let width = (view.frame.width - 10) / 3 // Example: 3 items per row
//          layout.itemSize = CGSize(width: width, height: 40)
        layout.estimatedItemSize = UICollectionViewFlowLayout.automaticSize
        cvInterest.collectionViewLayout = layout
        updateProgress(currentStep: currentStep, totalSteps: 9)
        // Do any additional setup after loading the view.
    }
}

  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = (collectionView.bounds.width - 40) / 3 // adjust as needed
        return CGSize(width: width, height: width + 20)
    }
