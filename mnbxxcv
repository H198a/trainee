
import UIKit

class EditVC: UIViewController {
    @IBOutlet weak var imgEdit: UIImageView!
    @IBOutlet weak var tblView: UITableView!
    var selectedImage: UIImage?
    var originalImage: UIImage?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tblView.isHidden = true
        imgEdit.image = selectedImage
        originalImage = imgEdit.image // Save original at load
        // Do any additional setup after loading the view.
        let nibName = UINib(nibName: "FilterCell", bundle: nil)
        tblView.register(nibName, forCellReuseIdentifier: "FilterCell")
    }
    
    
    @IBAction func onClickText(_ sender: Any) {
    }
    
    
    @IBAction func onClickEmojis(_ sender: Any) {
    }
    
    @IBAction func onClickBack(_ sender: Any) {
    }
    
    @IBAction func onClickFrames(_ sender: Any) {
    }
    
    
    @IBAction func onClickFilters(_ sender: Any) {
        tblView.isHidden = true
        
        
        let alert = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
           // List of filter options
        let filters: [(title: String, name: String)] = [
               ("CIPhotoEffectTransfer", "CIPhotoEffectTransfer"),
               ("CIPhotoEffectTonal", "CIPhotoEffectTonal"),
               ("CIPhotoEffectProcess", "CIPhotoEffectProcess"),
               ("CIPhotoEffectNoir", "CIPhotoEffectNoir"),
               ("CIPhotoEffectMono", "CIPhotoEffectMono"),
               ("CIPhotoEffectInstant", "CIPhotoEffectInstant"),
               ("CIPhotoEffectFade", "CIPhotoEffectFade"),
               ("CIPhotoEffectChrome", "CIPhotoEffectChrome")
           ]
        for filter in filters {
               alert.addAction(UIAlertAction(title: filter.title, style: .default, handler: { _ in
                   self.applyFilter(filterName: filter.name)
               }))
           }

           if let popover = alert.popoverPresentationController, let button = sender as? UIView {
               popover.sourceView = button
               popover.sourceRect = button.bounds
           }

           present(alert, animated: true, completion: nil)
        
    }
    
    @IBAction func onClickDraw(_ sender: Any) {
    }
    
     @IBAction func onClickCrop(_ sender: Any) {
     }
    func applyFilter(filterName: String) {
        
        guard let inputImage = originalImage,
              let ciImage = CIImage(image: inputImage) else { return }

        let context = CIContext(options: nil)
        var filteredImage: CIImage?

        switch filterName {
        case "CIHueAdjust":
            filteredImage = ciImage.applyingFilter(filterName, parameters: [kCIInputAngleKey: Double(arc4random_uniform(314)) / 100])
        case "CISepiaTone":
            filteredImage = ciImage.applyingFilter(filterName, parameters: [kCIInputIntensityKey: 1.0])
        default:
            filteredImage = ciImage.applyingFilter(filterName, parameters: [:])
        }

        if let output = filteredImage,
           let cgImage = context.createCGImage(output, from: output.extent) {
            imgEdit.image = UIImage(cgImage: cgImage)
        }
    }
}





 @IBAction func onClickAddProduct(_ sender: Any) {
     let productDetailVC = storyboard?.instantiateViewController(withIdentifier: "ProductDetailVC") as! ProductDetailVC
     productDetailVC.showBtn = false
     productDetailVC.currentUserId = self.cuurentUserId
     productDetailVC.completionHandler = { newProduct in
         self.viewModel.arrProducts.insert(newProduct, at: 0)
         self.cvProduct.reloadData()
         DispatchQueue.main.async{
             self.cvProduct.setContentOffset(.zero, animated: true)
         }
     }
     navigationController?.pushViewController(productDetailVC, animated: true)
 }
 @IBAction func onClickAddAndUpdate(_ sender: Any) {
     guard let id = txtID.text, !id.isEmpty else {
         print("something wrong in id")
         return
     }
     guard let nation = txtIdYear.text, !nation.isEmpty else{//year
         print("something wrong in nation")
         return
     }
     guard let idYear = txtNation.text, !idYear.isEmpty else{//nation
         print("somthing wrong in idyear")
         return
     }
     guard let year = txtYear.text, !year.isEmpty else{
         print("somethinf wrong in year")
         return
     }
     guard let population = txtPopulation.text, !population.isEmpty else{
         print("something wrong in population")
         return
     }
     guard let slugNation = txtSlugNation.text, !slugNation.isEmpty else{
         print("something wrong in slugNation")
         return
     }
     
     let param: [String: Any] = [
         "ID Nation": currentUserId as Any,
         "Nation": nation,
         "ID Year": idYear,
         "Year": year,
         "Population": population,
         "Slug Nation": slugNation
     ]
     let url = APIUrls.productBaseUrl
     APIManager.shared.request(url: url, method: .post, parameters: param) { result in
         switch result{
         case .success(let data):
             do{
                 guard let jsonDict = data as? [String: Any] else {
                     print("Invalid JSON structure")
                     return
                 }
                 let jsonData = try JSONSerialization.data(withJSONObject: jsonDict)
                 let newProduct = try JSONDecoder().decode(Dataa.self, from: jsonData)
                 print("responseee----------------",newProduct)
                 self.completionHandler?(newProduct)
                 self.navigationController?.popViewController(animated: true)
             } catch{
                 print("decoding error",error)
             }
         case .failure(let err):
             print("add error in UserViewModel:=====",err)
         }
     }
 }
}
