func fetchUserData() {
    guard let currentUserPhone = UserDefaults.standard.string(forKey: "phoneNumber")?.trimmingCharacters(in: .whitespacesAndNewlines).lowercased() else {
        print("No logged-in user found.")
        return
    }

    Firestore.firestore().collection("CupidArrowData").getDocuments { (querySnapshot, err) in
        if let err = err {
            print("Error fetching data: \(err)")
        } else {
            self.arrUser.removeAll()

            for document in querySnapshot!.documents {
                let profile = document["image"] as? String
                let name = document["name"] as? String ?? "No name"
                let age = document["age"] as? String ?? "No age"
                let phone = (document["phone"] as? String ?? "No Phone").trimmingCharacters(in: .whitespacesAndNewlines).lowercased()

                print("Comparing: \(currentUserPhone) VS \(phone)")

                if phone != currentUserPhone {
                    self.arrUser.append(FirebaseData(profilePic: profile, name: name, age: age))
                }
            }

            DispatchQueue.main.async {
                self.cvStory.reloadData()
                self.kolodaVIew.reloadData()
            }
        }
    }
}
func getCityFromLatLong(lat: Double, long: Double, completion: @escaping (String?) -> Void) {
    let location = CLLocation(latitude: lat, longitude: long)
    CLGeocoder().reverseGeocodeLocation(location) { placemarks, error in
        if let error = error {
            print("Reverse geocode failed: \(error.localizedDescription)")
            completion(nil)
        } else if let placemark = placemarks?.first {
            let city = placemark.locality ?? placemark.subAdministrativeArea ?? "Unknown City"
            completion(city)
        } else {
            completion(nil)
        }
    }
}

