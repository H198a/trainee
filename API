//POST VC
import UIKit

class PostVC: UIViewController {
    @IBOutlet weak var tblView: UITableView!
    var arrUser = UserViewModel()
    var arrName = ["John","riya","lily","test1","test2","test3","test4","test5","test6","test7"]
    var arrImg = ["Frame 52","fi-rr-arrow-small-left 1","Jessica","Frame 52","fi-rr-arrow-small-left 1","Jessica","Frame 52","fi-rr-arrow-small-left 1","Frame 52","Jessica"]
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let nibName = UINib(nibName: "CartCell", bundle: nil)
        tblView.register(nibName, forCellReuseIdentifier: "CartCell")
        loadUsers()
        // Do any additional setup after loading the view.
    }
    func loadUsers() {
        arrUser.fetchUsers {
            DispatchQueue.main.async {
                self.tblView.reloadData()
            }
        }
    }
    
}
extension PostVC: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrUser.userCount()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CartCell", for: indexPath) as! CartCell
        cell.lblHead?.text = arrUser.userName(at: indexPath.row)
        cell.lblDesc?.text = arrUser.userEmail(at: indexPath.row)
        
        let randomIndex = Int.random(in: 0..<arrName.count)
        cell.lblName.text = arrName[randomIndex]
        cell.mainImg.image = UIImage(named: arrImg[randomIndex])
        return cell
    }
}
//VIEW MODEL
import Foundation

class UserViewModel {
    var users: [[String: Any]] = []

    func fetchUsers(completion: @escaping () -> Void) {
        let url = "https://jsonplaceholder.typicode.com/posts"

        APIManager.shared.request(url: url, method: .get) { result in
            switch result {
            case .success(let value):
                if let dataArray = value as? [[String: Any]] {
                    self.users = dataArray
                } else if let wrapped = value as? [String: Any],
                          let dataArray = wrapped["data"] as? [[String: Any]] {
                    self.users = dataArray
                }
                completion()
            case .failure(let error):
                print(" Error in ViewModel:", error)
                completion()
            }
        }
    }

    func userName(at index: Int) -> String {
        return users[index]["title"] as? String ?? "No Name"
    }

    func userEmail(at index: Int) -> String {
        return users[index]["body"] as? String ?? "No Email"
    }

    func userCount() -> Int {
        return users.count
    }
}

//API HELPER
import Foundation
import Alamofire

class APIManager {
    static let shared = APIManager()

    private init() {}

    func request(
        url: String,
        method: HTTPMethod,
        parameters: [String: Any]? = nil,
        headers: HTTPHeaders? = nil,
        completion: @escaping (Result<Any, Error>) -> Void
    ) {
        AF.request(url,
                   method: method,
                   parameters: parameters,
                   encoding: method == .get ? URLEncoding.default : JSONEncoding.default,
                   headers: headers
        ).responseJSON { response in
            switch response.result {
            case .success(let value):
                completion(.success(value))
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
}

//API STRUCt
struct APIUrls {
    static let baseURL = "https://your-base-url.com"

    // User-related endpoints
    static let getUsers = baseURL + "/users"
    static let createUser = baseURL + "/users/create"
    
    // Posts
    static let getPosts = baseURL + "/posts"
    
    // Products
    static let getProducts = baseURL + "/products"
    
    // Add more as needed...
}
//call api in viewmodel instead of whole api call this
 let url = APIS.getPost

