// Convert ussers ([String]) to AssignedUsers objects
users = ussers.map { name in
    let assignedUser = AssignedUsers(context: (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext)
    assignedUser.name = name
    return assignedUser
}







homwvc viewdidload
let locationManager = CLLocationManager()
var currentUserLocation: CLLocation?

override func viewDidLoad() {
    super.viewDidLoad()
    // other setup...
    locationManager.delegate = self
    locationManager.requestWhenInUseAuthorization()
    locationManager.startUpdatingLocation()
}
func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
    guard let location = locations.last else { return }
    currentUserLocation = location
    locationManager.stopUpdatingLocation()
}

func didApplyFilter(_ filter: DataFilter) {
    guard let currentLocation = currentUserLocation else {
        print("Current location not available yet")
        return
    }

    filterUser = arrUser.filter { user in
        // Age and gender check
        let ageMatch = user.age! >= filter.minAge && user.age! <= filter.maxAge
        let genderMatch = user.gender == filter.gender

        // Location check
        if let locDict = user.location,
           let lat = locDict["lat"] as? Double,
           let lon = locDict["long"] as? Double {

            let userLocation = CLLocation(latitude: lat, longitude: lon)
            let distance = currentLocation.distance(from: userLocation) / 1000 // in KM

            print("Distance to user: \(distance) km")

            return ageMatch && genderMatch && distance <= filter.maxDistance
        }

        return false // skip if no location
    }

    cvStory.reloadData()
    loadContainerViews()
    kolodaVIew.reloadData()
}


/filterVC

func resetContent() {
    guard let userData = arrDisplayImageViewDetail else { return }

    swipeImage.sd_setImage(with: URL(string: userData.profilePic ?? ""))
    lblName.text = "\(userData.name ?? ""), "
    lblAge.text = "\(userData.age ?? "NA")"
    lblCity.text = "\(userData.location["city"] ?? "Unknown")"

    // Distance calculation
    if let locationDict = UserDefaults.standard.dictionary(forKey: "Location"),
       let userLat = locationDict["lat"] as? Double,
       let userLong = locationDict["long"] as? Double {

        let loggedInLocation = CLLocation(latitude: userLat, longitude: userLong)

        if let lat = userData.location["lat"] as? Double,
           let lon = userData.location["long"] as? Double {

            let otherUserLocation = CLLocation(latitude: lat, longitude: lon)

            let distanceInMeters = loggedInLocation.distance(from: otherUserLocation)
            let distanceInKM = distanceInMeters / 1000

            lblDistance.text = String(format: "%.1f km away", distanceInKM)
        } else {
            lblDistance.text = "Distance unknown"
        }
    } else {
        lblDistance.text = "My location unknown"
    }
}


class ViewController: UIViewController {
 @IBOutlet weak var tblTasks: UITableView!
  var tasks: [TaskSection] = []
 override func viewDidLoad() {
     super.viewDidLoad()
 let nibName = UINib(nibName: "TaskCell", bundle: nil)
 tblTasks.register(nibName, forCellReuseIdentifier: "TaskCell")
 }
 }
 extension ViewController{
 
 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
     let selectedUser = tasks[indexPath.section].tasks[indexPath.row]
 let detailVC = storyboard?.instantiateViewController(withIdentifier: "DetailVC") as! DetailVC
 detailVC.assignedUsers = selectedUser.assignTo!.components(separatedBy: ",")
 navigationController?.pushViewController(detailVC, animated: true)
 }
 }
 
 class DetailVC: UIViewController {
 var assignedUsers: [String] = []
 extension DetailVC{
 
 @IBAction func onClickUpdate(_ sender: Any) {
     let updateVC = storyboard?.instantiateViewController(withIdentifier: "AddTasksVC") as! AddTasksVC
 updateVC.ussers = assignedUsers
 navigationController?.pushViewController(updateVC, animated: true)
 }
 }
 class AddTasksVC: UIViewController {
 var users: [AssignedUsers] = []
 var ussers: [String] = []
 
 cvAssignedUsers.register(nibName, forCellWithReuseIdentifier: "AddTaskCell")
 override func viewDidLoad() {
     super.viewDidLoad()
 if isFormEdit{
     if let task = tasks {
         txtTitle.text = task.title
         txtDesc.text = task.desc
         startDate.date = task.startDate ?? Date()
         endDate.date = task.endDate ?? Date()
         
         // Load assigned users
         if let userSet = task.assigneUsers as? Set<AssignedUsers> {
             users = Array(userSet)
         }
     }
     lblHeading.text = "Update Task"
     btnAddAndUpdate.setTitle("Update", for: .normal)
 } else{
     lblHeading.text = "Add Task"
     txtDesc.text = "Enter Description"
     txtDesc.textColor = UIColor.lightGray
 }
 }
 }
 extension AddTasksVC: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{
     func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
         print("uaers--------",users.count)
         return users.count
     }
     
     func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
         let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "AddTaskCell", for: indexPath) as! AddTaskCell
         cell.lblUser.text = users[indexPath.item].name
         cell.btnClose.tag = indexPath.item
         cell.btnClose.addTarget(self, action: #selector(deleteUser), for: .touchUpInside)
         return cell
     }
}
 extension AddTasksVC{
 @IBAction func onClickAddTask(_ sender: UIButton) {
     if validateFields(){
         
         if txtDesc.textColor == .lightGray{
             showAlert(message: "Please enter description")
         }
         guard users.count >= 1 else{
             showAlert(message: "please assign users")
             return
         }
         guard let titlee = txtTitle.text, !titlee.isEmpty else{
             print("error in title")
             return
         }
         guard let desc = txtDesc.text, !desc.isEmpty else{
             print("error in desc")
             return
         }
         let assign = users.count
         let id = "\(Int.random(in: 1000...9999))"
         let startDate = startDate.date
         let endDate = endDate.date
         
         guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else{
             return
         }
         let context = appDelegate.persistentContainer.viewContext
         let newTask = ToDoApp.TaskEntity(context: context)
         if isFormEdit{
             guard let taskToUpdate = tasks else { return }
             taskToUpdate.title = txtTitle.text
             taskToUpdate.desc = txtDesc.text
             taskToUpdate.endDate = endDate
             taskToUpdate.startDate = startDate
             taskToUpdate.assignTo = "\(ussers.count)"
             taskToUpdate.status = "Open"
             
             let taskID = taskToUpdate.taskID ?? UUID().uuidString
             taskToUpdate.taskID = taskID
             print("task id....",taskID)
             do {
                 try context.save()
                 print("Task updated successfully:", taskToUpdate)
                 scheduleNotification(eventName: taskToUpdate.title ?? "", eventDescription: taskToUpdate.desc ?? "", eventDate: taskToUpdate.endDate ?? Date(), notificationID: taskID)
                 users = []
                 cvAssignedUsers.reloadData()
                 navigationController?.popToRootViewController(animated: true)
                 showAlert(message: "Task updated successfully")
                 
             } catch {
                 print("Failed to update task:", error)
                 showAlert(message: "Failed to update task.")
             }
         }
       }
    }
 }
 po taskToUpdate.assignTo
â–¿ Optional<String>
  - some : "[<AssignedUsers: 0x60000214ccd0> (entity: AssignedUsers; id: 0xacc9063bd6a52757 <x-coredata://2296F5E2-1DEE-4F46-8D1D-B8FA3B7CF7DB/AssignedUsers/p17>; data: {\n    name = \"30.\";\n    
taskEntity = \"0xacc9063bd6a12755 <x-coredata://2296F5E2-1DEE-4F46-8D1D-B8FA3B7CF7DB/TaskEntity/p16>\";\n}), <AssignedUsers: 0x600002158960> (entity: AssignedUsers; id: 0x6000002bd6a0 <x-coredata:///AssignedUsers/tC6165DFE-9DD2-4251-B5F8-DECD7F2307252>; 
data: {\n    name = dfsf;\n    taskEntity = nil;\n})]"




 class ViewController: UIViewController {
 @IBOutlet weak var tblTasks: UITableView!
  var tasks: [TaskSection] = []
 override func viewDidLoad() {
     super.viewDidLoad()
 let nibName = UINib(nibName: "TaskCell", bundle: nil)
 tblTasks.register(nibName, forCellReuseIdentifier: "TaskCell")
 }
 }
 extension ViewController{
 
 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
     let selectedUser = tasks[indexPath.section].tasks[indexPath.row]
 let detailVC = storyboard?.instantiateViewController(withIdentifier: "DetailVC") as! DetailVC
 detailVC.assignedUsers = selectedUser.assignTo!.components(separatedBy: ",")
 navigationController?.pushViewController(detailVC, animated: true)
 }
 }
 
 class DetailVC: UIViewController {
 var assignedUsers: [String] = []
 
 
 override func viewWillAppear(_ animated: Bool) {
     super.viewWillAppear(animated)
     guard let taskID = ID else {
         print("No taskID found.")
         return
     }
     if let updatedTask = fetchTaskByID(taskID: taskID) {
         self.assignedUsers = updatedTask.assignTo?.components(separatedBy: ",") ?? []
//            self.cvAssignedUsers.reloadData()
     }
 }
 extension DetailVC{
 
 @IBAction func onClickUpdate(_ sender: Any) {
     let updateVC = storyboard?.instantiateViewController(withIdentifier: "AddTasksVC") as! AddTasksVC
 updateVC.ussers = assignedUsers
 navigationController?.pushViewController(updateVC, animated: true)
 }
 }
 
 class AddTasksVC: UIViewController {
 var users: [AssignedUsers] = []
 var ussers: [String] = []
 
 cvAssignedUsers.register(nibName, forCellWithReuseIdentifier: "AddTaskCell")
 override func viewDidLoad() {
     super.viewDidLoad()
 if isFormEdit{
     if let task = tasks {
         txtTitle.text = task.title
         txtDesc.text = task.desc
         startDate.date = task.startDate ?? Date()
         endDate.date = task.endDate ?? Date()
         
         // Load assigned users
         if let userSet = task.assigneUsers as? Set<AssignedUsers> {
             users = Array(userSet)
         }
     }
     lblHeading.text = "Update Task"
     btnAddAndUpdate.setTitle("Update", for: .normal)
 } else{
     lblHeading.text = "Add Task"
     txtDesc.text = "Enter Description"
     txtDesc.textColor = UIColor.lightGray
 }
 }
 }
 extension AddTasksVC: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{
     func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
         print("uaers--------",users.count)
         return users.count
     }
     
     func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
         let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "AddTaskCell", for: indexPath) as! AddTaskCell
         cell.lblUser.text = users[indexPath.item].name
         cell.btnClose.tag = indexPath.item
         cell.btnClose.addTarget(self, action: #selector(deleteUser), for: .touchUpInside)
         return cell
     }
}
 extension AddTasksVC{
 @IBAction func onClickAddTask(_ sender: UIButton) {
     if validateFields(){
         
         if txtDesc.textColor == .lightGray{
             showAlert(message: "Please enter description")
         }
         guard users.count >= 1 else{
             showAlert(message: "please assign users")
             return
         }
         guard let titlee = txtTitle.text, !titlee.isEmpty else{
             print("error in title")
             return
         }
         guard let desc = txtDesc.text, !desc.isEmpty else{
             print("error in desc")
             return
         }
//            let assign = users.count
         let id = "\(Int.random(in: 1000...9999))"
         let startDate = startDate.date
         let endDate = endDate.date
         
         guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else{
             return
         }
         let context = appDelegate.persistentContainer.viewContext
         let newTask = ToDoApp.TaskEntity(context: context)
         if isFormEdit{
             guard let taskToUpdate = tasks else { return }
             taskToUpdate.title = txtTitle.text
             taskToUpdate.desc = txtDesc.text
             taskToUpdate.endDate = endDate
             taskToUpdate.startDate = startDate
             taskToUpdate.assignTo = users.map { $0.name ?? "" }.joined(separator: ",")
             taskToUpdate.status = "Open"
             
             let taskID = taskToUpdate.taskID ?? UUID().uuidString
             taskToUpdate.taskID = taskID
             print("task id....",taskID)
             do {
                 try context.save()
                 print("Task updated successfully:", taskToUpdate)
                 scheduleNotification(eventName: taskToUpdate.title ?? "", eventDescription: taskToUpdate.desc ?? "", eventDate: taskToUpdate.endDate ?? Date(), notificationID: taskID)
                 users = []
                 cvAssignedUsers.reloadData()
                 navigationController?.popToRootViewController(animated: true)
                 showAlert(message: "Task updated successfully")
                 
             } catch {
                 print("Failed to update task:", error)
                 showAlert(message: "Failed to update task.")
             }
         } else{
             newTask.title = titlee
             newTask.desc = desc
             newTask.assignTo = users.map { $0.name ?? "" }.joined(separator: ",")
             newTask.startDate = startDate
             newTask.endDate = endDate
             newTask.taskID = id
             newTask.status = "Open"
             
             //Link assigned users to this taskEntity
             for user in users {
                 user.taskEntity = newTask
             }
             do{
                 try context.save()
                 self.dismiss(animated: true)
                 navigationController?.popToRootViewController(animated: true)
                 showAlert(message: "Task added successfully")
                 print("task added successfully",newTask)
                 users = []
                 scheduleNotification(eventName: newTask.title!, eventDescription: newTask.desc!, eventDate: newTask.endDate!, notificationID: newTask.taskID!)
                 cvAssignedUsers.reloadData()
             } catch{
                 print("failed to add task:----",error)
             }
         }
     }
    }
 }
==
