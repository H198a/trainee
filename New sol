bimport UIKit
import Koloda
import FirebaseCore
import FirebaseAuth
import FirebaseFirestore
import FirebaseDatabase
import SDWebImage
import SwiftLoader
import CoreLocation

class HomeVC: UIViewController {

    @IBOutlet weak var cvStory: UICollectionView!
    @IBOutlet weak var likeImg: UIImageView!
    @IBOutlet weak var crossImg: UIImageView!
    @IBOutlet weak var starImg: UIImageView!
    @IBOutlet weak var kolodaVIew: KolodaView!

    var arrUser = [FirebaseData]()
    var containers = [SwipeImageVC]()
    var filterUser = [FirebaseData]()
    var isFilterApplied = false

    var currentLocation: CLLocation?

    override func viewDidLoad() {
        super.viewDidLoad()
        setupLocationManager()
        setUP()
        let nibName = UINib(nibName: "HomeCell", bundle: nil)
        cvStory.register(nibName, forCellWithReuseIdentifier: "HomeCell")
        kolodaVIew.delegate = self
        kolodaVIew.dataSource = self
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchUserData()
        navigationController?.setNavigationBarHidden(true, animated: true)
    }

    func setUP() {
        starImg.isUserInteractionEnabled = false
        likeImg.isUserInteractionEnabled = false
        crossImg.isUserInteractionEnabled = false
    }

    func setupLocationManager() {
        let locationManager = CLLocationManager()
        locationManager.requestWhenInUseAuthorization()
        if CLLocationManager.locationServicesEnabled() {
            currentLocation = locationManager.location
        }
    }

    func fetchUserData() {
        SwiftLoader.show(title: "Loading...", animated: true)
        guard let currentUserPhone = UserDefaults.standard.string(forKey: "phoneNumber") else {
            print("No logged-in user found.")
            return
        }

        Firestore.firestore().collection("CupidArrowData").getDocuments { (querySnapshot, err) in
            SwiftLoader.hide()
            if let err = err {
                print("Error fetching data: \(err)")
            } else {
                self.arrUser.removeAll()
                for document in querySnapshot!.documents {
                    let name = document["name"] as? String ?? "No name"
                    let age = document["age"] as? String ?? "0"
                    let phone = (document["phone"] as? String ?? "").trimmingCharacters(in: .whitespacesAndNewlines)
                    let location = document["location"] as? [String: Any] ?? [:]
                    let gender = document["gender"] as? String ?? "No gender"

                    if phone != currentUserPhone {
                        let profileData = document["profilePic"] as? String
                        self.arrUser.append(FirebaseData(profilePic: profileData, location: location, name: name, gender: gender, age: age))
                    }
                }
                DispatchQueue.main.async {
                    self.cvStory.reloadData()
                    self.loadContainerViews()
                    self.kolodaVIew.reloadData()
                }
            }
        }
    }

    func loadContainerViews() {
        containers.removeAll()
        let dataSource = isFilterApplied ? filterUser : arrUser
        for user in dataSource {
            let vc = self.storyboard?.instantiateViewController(withIdentifier: "SwipeImageVC") as! SwipeImageVC
            vc.arrDisplayImageViewDetail = user
            self.addChild(vc)
            containers.append(vc)
        }
    }

    @IBAction func onClickFilter(_ sender: Any) {
        if let filterVC = storyboard?.instantiateViewController(identifier: "FilterVC") as? FilterVC {
            filterVC.modalPresentationStyle = .overFullScreen
            filterVC.modalTransitionStyle = .crossDissolve
            filterVC.delegate = self
            present(filterVC, animated: true)
        }
    }
}

extension HomeVC: FilterDelegate {
    func didApplyFilter(_ filter: DataFilter) {
        guard let currentLocation = currentLocation else {
            print("Current location not available.")
            return
        }

        filterUser = arrUser.filter { user in
            guard let userAge = Int(user.age) else { return false }
            let ageMatch = userAge >= filter.minAge && userAge <= filter.maxAge
            let genderMatch = user.gender == filter.gender

            let userLocation = CLLocation(latitude: user.latitude, longitude: user.longitude)
            let distance = currentLocation.distance(from: userLocation) / 1000 // in KM
            let distanceMatch = distance <= filter.maxDistance

            return ageMatch && genderMatch && distanceMatch
        }

        isFilterApplied = true
        cvStory.reloadData()
        loadContainerViews()
        kolodaVIew.reloadData()
    }
}

extension HomeVC: UICollectionViewDataSource, UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return isFilterApplied ? filterUser.count : arrUser.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "HomeCell", for: indexPath) as! HomeCell
        let user = isFilterApplied ? filterUser[indexPath.item] : arrUser[indexPath.item]
        cell.lblHome.text = user.name
        cell.lblHome.font = UIFont.boldSystemFont(ofSize: 16)
        if let profilePic = user.profilePic, let url = URL(string: profilePic) {
           
::contentReference[oaicite:0]{index=0}
 
