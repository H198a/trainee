import Foundation
import FirebaseCore
import FirebaseAuth
import FirebaseFirestore

class AuthService {
    public static let shared = AuthService()
//    public var isTestOTPEnabled: Bool = false
//    public var testOTP: String = "1234"

    // Function to initiate phone number verification (can be simplified for testing)
    func verifyPhoneNumber(phoneNumber: String, completion: @escaping (String?, Error?) -> Void) {
     
            //print("⚠️ WARNING: Test OTP mode is ENABLED. Skipping actual verification.")
            //completion("testVerificationID", nil) // Simulate successful verification ID
            return
      
        PhoneAuthProvider.provider().verifyPhoneNumber(phoneNumber, uiDelegate: nil) { verificationID, error in
            completion(verificationID, error)
        }
    }

    // Function to sign in with verification code
       func signInWithVerificationCode(verificationID: String, verificationCode: String, completion: @escaping (AuthDataResult?, Error?) -> Void) {
           let credential = PhoneAuthProvider.provider().credential(withVerificationID: verificationID, verificationCode: verificationCode)
           Auth.auth().signIn(with: credential) { authResult, error in
               completion(authResult, error)
           }
       }

    // Function to sign in (or create if new) with phone number and save data to Firestore
    func signUpAndSaveUser(userData: storeDataFire, completion: @escaping (User?, Error?) -> Void) {
        guard let phone = userData.phone, let otp = userData.OTP else {
            completion(nil, NSError(domain: "", code: 0, userInfo: [NSLocalizedDescriptionKey: "Phone number is missing."]))
            return
        }

        let verificationIDForTest = userData.OTP! // Use the simulated ID

        let credential = PhoneAuthProvider.provider().credential(withVerificationID: verificationIDForTest,
                                                                 verificationCode: otp) // Use the static OTP

        Auth.auth().signIn(with: credential) { authResult, error in
            if let error = error {
                print("Error signing in (or creating) user with phone (static OTP): \(error.localizedDescription)")
                completion(nil, error)
                return
            }

            if let user = authResult?.user {
                let data: [String: Any] = [
                    "id": user.uid,
                    "name": userData.name ?? "",
                    "email": userData.email ?? "",
                    "age": userData.age ?? "",
                    "gender": userData.gender ?? "",
                    "phone": userData.phone ?? "",
                    "verificationCode": userData.OTP ?? "", // You might still want to store the entered OTP
                    "interests": userData.interests.compactMap { $0 },
                    "lookingFor": userData.lookingFor ?? "",
                    "location": userData.location.compactMap { $0 },
                    "profle": userData.image ?? ""
                ]

                let db = Firestore.firestore()
                db.collection("CupidArrowData").document(user.uid).setData(data) { firestoreError in
                    if let firestoreError = firestoreError {
                        print("Error saving user data to Firestore: \(firestoreError.localizedDescription)")
                        completion(nil, firestoreError)
                    } else {
                        print("User successfully signed up (or signed in) with static OTP and data saved!")
                        completion(user, nil)
                    }
                }
            } else {
                completion(nil, NSError(domain: "", code: 0, userInfo: [NSLocalizedDescriptionKey: "Could not retrieve user after sign-in (static OTP)."]))
            }
        }
    }
}



    @IBAction func onClickVerify(_ sender: Any) {
        // Get all OTP text fields
          let otpFields = otpView.subviews.compactMap { $0 as? UITextField }
        let enteredOTP = otpFields.compactMap { $0.text }.joined()
        
        if enteredOTP.isEmpty {
                   showAlert(message: "Please enter the full OTP")
                   return
               }
          
//          // Check if any field is empty
//          let isOTPEmpty = otpFields.contains { ($0.text ?? "").isEmpty }
//        if isOTPEmpty {
//               // Show alert or validation message
//               let alert = UIAlertController(title: "Error", message: "Please enter the full OTP", preferredStyle: .alert)
//               alert.addAction(UIAlertAction(title: "OK", style: .default))
//               present(alert, animated: true)
//               return
//           }
        guard let verificationID = self.verificationID else {
                  showAlert(message: "Verification ID not found. Please go back and try again.")
                  return
              }
        
        AuthService.shared.signInWithVerificationCode(verificationID: verificationID, verificationCode: enteredOTP) { authResult, error in
            if let error = error {
                print("Error verifying OTP: \(error.localizedDescription)")
                self.showAlert(message: "Invalid OTP. Please try again.")
                return
            }
            if authResult?.user != nil {
                print("OTP verification successful. User signed in (or created).")
                self.storeDatatoFIrebase?.OTP = enteredOTP // Store the OTP
                let nameandEmailVc = self.storyboard?.instantiateViewController(withIdentifier: "NameAndEmailVC") as? NameAndEmailVC
                nameandEmailVc?.currentStep = self.currentStep + 1
                nameandEmailVc?.storeDataToFirebase = self.storeDatatoFIrebase
                self.navigationController?.pushViewController(nameandEmailVc!, animated: false)
            } else {
                self.showAlert(message: "Error during OTP verification.")
            }
        }
//        let nameandEmailVc = storyboard?.instantiateViewController(withIdentifier: "NameAndEmailVC") as? NameAndEmailVC
//        nameandEmailVc?.currentStep = self.currentStep + 1
//        nameandEmailVc?.storeDataToFirebase = self.storeDatatoFIrebase
//        navigationController?.pushViewController(nameandEmailVc!, animated: false)
    }



    @IBAction func onClickContinueToOTP(_ sender: Any) {
        
        storeDataToFirebase = storeDataFire()
        storeDataToFirebase?.phone = txtEnterPhone.text
        let name = storeDataToFirebase?.phone
        
        if let phoneNumber = name { // Use optional binding to safely access the phone number
            print(phoneNumber)
            
            if validateFields() {
                guard !phoneNumber.isEmpty else {
                    showAlert(message: "Please enter a valid phone number.")
                    return
                }
                
                AuthService.shared.verifyPhoneNumber(phoneNumber: phoneNumber) { verificationID, error in
                    if let error = error {
                        print("Error verifying phone number: \(error.localizedDescription)")
                        self.showAlert(message: "Error sending OTP. Please try again.")
                        return
                    }
                    if let verificationID = verificationID {
                        print("Verification ID received: \(verificationID)")
                        self.verificationID = verificationID // Store the verification ID
                        
                        let otpVC = self.storyboard?.instantiateViewController(withIdentifier: "OTPVC") as? OTPVC
                        otpVC?.currentStep = self.currentStep + 1
                        otpVC?.storeDatatoFIrebase = self.storeDataToFirebase
                        otpVC?.verificationID = self.verificationID // Pass the verification ID
                        self.navigationController?.pushViewController(otpVC!, animated: false)
                    } else {
                        self.showAlert(message: "Could not retrieve verification ID.")
                    }
                }
            }
        } else {
            print("Error: Phone number is nil after assignment.")
            showAlert(message: "Please enter a valid phone number.")
        }
    }



    @IBAction func onClickAllowLocation(_ sender: Any) {
        LocationManager.shared.requestLocation { [weak self] status in
            DispatchQueue.main.async {
                if status == .authorizedWhenInUse || status == .authorizedAlways {
                    self?.storeDataToFirebase?.location = ["ind", "ahm"]
                    //print(self!.storeDataToFirebase?.location)
                    
                    if let userData = self?.storeDataToFirebase {
                        AuthService.shared.signUpAndSaveUser(userData: userData) { user, error in
                            if let error = error {
                                print("Error during sign up and save: \(error.localizedDescription)")
                                // Handle the error (e.g., show an alert)
                            } else if let user = user {
                                print("Sign up and save successful. User UID: \(user.uid)")
                                Helper.shared.setHomeRoot(from: self!.storyboard!)
                            }
                        }
                    } else {
                        print("Error: storeDataToFirebase is nil.")
                        // Handle this error
                    }
                } else {
                    // Permission not granted → Stay on same screen or show alert
                    let alert = UIAlertController(title: "Permission Denied",
                                                  message: "Please allow location access to continue.",
                                                  preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "OK", style: .default))
                    self?.present(alert, animated: true)
                }
            }
        }
    }

